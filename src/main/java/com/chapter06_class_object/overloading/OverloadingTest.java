package com.chapter06_class_object.overloading;

public class OverloadingTest {
    /*
    오버로딩이란?
    매개 변수 부분의 타입, 갯수, 순서를 다르게 작성하면 서로 다른 메소드나 생성자로 인식하기 때문에
    동일한 이름의 생성자나 메소드를 여러 개 작성할 수 있는 것을 오버로딩이라고 한다.

    오버로딩의 사용 이유?
    매개 변수의 종류별로 메소드 내용을 다르게 작성해야 하는 경우들이 종종있다.
    이 때, 동일한 기능의 메소드를 매개변수에 따라 다르게 이름을 정의하면 복잡하고 관리하기가 매우 어렵다.
    따라서 동일한 이름으로 다양한 종류의 매개변수에 따라 처리해야하는 여러 메소드를 동일한 이름으로 관리하기 위해
    사용하는 기술을 오버로딩이라고 한다.

    오버로딩의 조건
    동일한 이름을 가진 메소드의 파라미터 선언부에 매개변수의 타입, 갯수, 순서를 다르게 작성하여
    한 클래스 내에 동일한 이름의 메소드를 여러 개 작성할 수 있도록 한다.
    메소드의 시그니처(메소드의 파라미터 선언부)가 다르면 다른 메소드로 인식하기 때문이다.
    즉, 시그니처 중 메소드 이름은 동일해야 하기 때문에 파라미터 선언부가 다르게 작성되어야 오버로딩이 성립된다.
    */

    public void test() {}
//    public void test() {} // 메소드의 시그니처가 같아 에러가 난다.
//    private void test() {} // 접근 제한자는 메소드 시그니처에 해당하지 않아 메소드 시그니처를 같다고 본다.
//    public int test() {return 0;} // 반환형은 메소드 시그니처에 해당하지 않는다.
    public void test (int num1) {} // 메소드 시그니처가 다르기 때문에 메소드 오버로딩이 성립한다.
//    public void test (int num2) {} // 매개변수의 이름은 메소드 시그니처에 영향을 주지 않는다.
    public void test (int num1, int num2) {} // 매개변수의 개수가 다르기 때문에 오버로딩이 성립한다.
    public void test (int num1, String nmae) {} // 매개 변수의 타입이 다르기 때문에 오버로딩이 성립한다.
    public void test (String nmae, int num1) {} // 매개 변수의 순서가 다르기 때문에 오버로딩이 성립한다.


}
